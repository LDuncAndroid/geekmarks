// Code generated by go-bindata.
// sources:
// webroot/index.html
// webroot/index.js
// webroot/logo.js
// webroot/styles.css
// DO NOT EDIT!

package server

import (
	"github.com/elazarl/go-bindata-assetfs"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webrootIndexHtml = []byte(`<!DOCTYPE html>
<html>
  <head>
    <title>Geekmarks: Open-Source, API-Driven, Geeky Bookmarking Service</title>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="styles.css">

    <script
      src="https://code.jquery.com/jquery-1.12.4.min.js"
      integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ="
      crossorigin="anonymous"
      ></script>
    <script src="logo.js"></script>
    <script src="index.js"></script>
  </head>

  <body>

    <a href="https://github.com/dimonomid/geekmarks"><img style="position: absolute; top: 0; left: 0; border: 0;" src="https://camo.githubusercontent.com/121cd7cbdc3e4855075ea8b558508b91ac463ac2/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f677265656e5f3030373230302e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_left_green_007200.png"></a>

    <div class="logo-large"></div>
    <p class="subtitle">
      Open-Source, API-Driven, Geeky Bookmarking Service
    </p>

    <div class="spacer-menu"></div>

    <div class="main-links-list">
      <p>
        <a href="#">Get extension for Chrome / Opera</a>
      </p>
      <p>
        <a href="#">Read an article</a>
      </p>
      <p>
        <a href="https://github.com/dimonomid/geekmarks">Fork Geekmarks at GitHub</a>
      </p>
    </div>
  </body>
</html>
`)

func webrootIndexHtmlBytes() ([]byte, error) {
	return _webrootIndexHtml, nil
}

func webrootIndexHtml() (*asset, error) {
	bytes, err := webrootIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "webroot/index.html", size: 1395, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _webrootIndexJs = []byte(`(function() {
  $(document).ready(function() {
    $(".logo-large").html("<p>" + gmLogo.getLogoDataHtml() + "</p>")
  })
})();
`)

func webrootIndexJsBytes() ([]byte, error) {
	return _webrootIndexJs, nil
}

func webrootIndexJs() (*asset, error) {
	bytes, err := webrootIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "webroot/index.js", size: 127, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _webrootLogoJs = []byte(`'use strict';

(function(exports){

  function getLogoData() {
    var d = "";

    d += "                     ██                              ██           \n";
    d += "                     ██                              ██           \n";
    d += "▄█▀▀██▀▄█▀▀█▄ ▄█▀▀█▄ ██ ▄▀▀ ██▄▀█▄▄▀█▄ ▄█▀▀█▄  ██▄▀▀ ██ ▄▀▀ ▄█▀▀█▄\n";
    d += "██  ██ ██▄▄██ ██▄▄██ ███▄   ██  ██  ██  ▄▄▄██  ██    ███▄   ▀█▄▄▄ \n";
    d += "██  ██ ██  ▄▄ ██  ▄▄ ██ ▀█▄ ██  ██  ██ ██  ██  ██    ██ ▀█▄ ▄▄  ██\n";
    d += "▄▀▀▀▀   ▀▀▀▀   ▀▀▀▀  ▀▀   ▀ ▀▀  ▀▀  ▀▀  ▀▀▀▀▀▀ ▀▀    ▀▀   ▀  ▀▀▀▀ \n";
    d += "▄▀▀▀▀▄                                                            \n";
    d += "▀▄▄▄▄▀                                                            \n";

    return d;
  }

  function getLogoDataHtml() {
    return getLogoData().replace(/ /g, '&nbsp;').replace(/\n/g, '<br/>');
  }

  exports.getLogoData = getLogoData;
  exports.getLogoDataHtml = getLogoDataHtml;

})(typeof exports === 'undefined' ? this['gmLogo']={} : exports);
`)

func webrootLogoJsBytes() ([]byte, error) {
	return _webrootLogoJs, nil
}

func webrootLogoJs() (*asset, error) {
	bytes, err := webrootLogoJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "webroot/logo.js", size: 1393, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _webrootStylesCss = []byte(`
.logo-large {
  text-align: center;
  font-family: Monospace;
  font-size: 11pt;
  line-height: 11pt;
  color: gray;
  padding-top: 50pt;
}

.subtitle {
  text-align: center;
  font-family: Monospace;
  font-size: 21pt;
}

.spacer-menu {
  padding-top: 50pt;
}

.main-links-list {
  text-align: center;
}

.main-links-list a {
  font-family: Monospace;
  font-size: 15pt;
  color: darkgreen;
  text-decoration: none;
}

.main-links-list a:hover {
  text-decoration: underline;
}
`)

func webrootStylesCssBytes() ([]byte, error) {
	return _webrootStylesCss, nil
}

func webrootStylesCss() (*asset, error) {
	bytes, err := webrootStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "webroot/styles.css", size: 480, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"webroot/index.html": webrootIndexHtml,
	"webroot/index.js": webrootIndexJs,
	"webroot/logo.js": webrootLogoJs,
	"webroot/styles.css": webrootStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"webroot": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{webrootIndexHtml, map[string]*bintree{}},
		"index.js": &bintree{webrootIndexJs, map[string]*bintree{}},
		"logo.js": &bintree{webrootLogoJs, map[string]*bintree{}},
		"styles.css": &bintree{webrootStylesCss, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
