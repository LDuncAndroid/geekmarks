# Geekmarks backend API
swagger: '2.0'
info:
  title: Geekmarks backend API
  description: |
    Geekmarks backend exposes a RESTful API, all endpoints are located under
    <server_addr>/api. In this text, <server_addr> will be assumed to be
    geekmarks.dmitryfrank.com, but of course anyone could run their own backend
    at their own address. For example, when running the backend locally with
    the default configuration, <server_addr> is localhost:4000.

    There are endpoints which don't require authentication, just a few though:
    at the moment, non-authenticated users can do nothing but get client id and
    authenticate. See the authentication section for details.

    All other endpoints require authentication.

  version: "1.0.0"
# the domain of the service
host: geekmarks.dmitryfrank.com
schemes:
  - https

#host: localhost:4000
#schemes:
#  - http

# will be prefixed to all paths
basePath: /api
produces:
  - application/json

# Paths {{{
paths:
  # Auth {{{
  /auth/{auth_provider}/client_id:
    get: # {{{
      summary: Get OAuth2 client ID
      parameters:
        - name: auth_provider
          in: path
          required: true
          type: string
          enum:
            - google
      tags:
        - Authentication
      responses:
        200:
          description: Object with the client ID for the given auth provider
          schema:
            type: object
            properties:
              clientID:
                type: string
                description: Client ID
    # }}}

  # }}}

  # Tags {{{
  # There are two kinds of responses to /my/tags, depending on the "shape"
  # parameter, and Swagger does not currently support this.
  #
  # This is planned for the 3.0, but until that, there is a workaround, see:
  # https://github.com/OAI/OpenAPI-Specification/issues/146#issuecomment-117288707
  /my/tags/{tag_path}#tree_or_single:
    get: # {{{
      summary: Get a single tag or a tree of tags
      description: |
      security:
        - Bearer: []
      parameters:
        - name: shape
          in: query
          description: |
            Shape of the tags to return. NOTE: for the shape "flat", see
            /my/tags#flat_filtered.
          required: true
          type: string
          default: tree
          enum:
            - tree
            - single
        - $ref: "#/parameters/tag_path_param"
      tags:
        - Tags
      responses:
        200:
          description: Tag(s) data
          schema:
            $ref: '#/definitions/Tag'
        401:
          description: Unauthorized error
          schema:
            $ref: '#/definitions/Error'
    # }}}

  /my/tags/{tag_path}#flat_filtered:
    get: # {{{
      summary: Get a flat list of tags, possibly filtered with a pattern
      description: |
      security:
        - Bearer: []
      parameters:
        - name: shape
          in: query
          description: |
            Shape of the tags to return.
            NOTE: for other shapes, see /my/tags#tree_or_single.
          required: true
          type: string
          default: flat
          enum:
            - flat
        - name: pattern
          in: query
          description: Pattern to filter tags.
          required: false
          type: string
          default: ""
        - name: allow_new
          in: query
          description: |
            Whether the new tag suggestion should be included in the output
          required: false
          type: string
          default: ""
          enum:
            - "1"
            - ""
        - $ref: "#/parameters/tag_path_param"
      tags:
        - Tags
      responses:
        200:
          description: Flat tags data
          schema:
            type: array
            items:
              $ref: '#/definitions/TagFlat'
        401:
          description: Unauthorized error
          schema:
            $ref: '#/definitions/Error'
    # }}}

  /my/tags/{tag_path_parent}:
    post: # {{{
      summary: Create a new tag under the existing one
      security:
        - Bearer: []
      parameters:
        - $ref: "#/parameters/parent_tag_path_param"
        - name: tag_data
          in: body
          description: |
            Tag data
          required: true
          schema:
            $ref: '#/definitions/TagPostPayload'
      tags:
        - Tags
      responses:
        200:
          description: Object with the ID of the newly created tag
          schema:
            $ref: '#/definitions/TagPostResponsePayload'
        401:
          description: Unauthorized error
          schema:
            $ref: '#/definitions/Error'
  # }}}

  /my/tags/{tag_path}:
    put: # {{{
      summary: Edit existing tag
      security:
        - Bearer: []
      parameters:
        - $ref: "#/parameters/tag_path_param"
        - name: tag_data
          in: body
          description: |
            Tag data
          required: true
          schema:
            $ref: '#/definitions/TagPutPayload'
      tags:
        - Tags
      responses:
        200:
          schema:
            $ref: '#/definitions/EmptyObjectPayload'
        401:
          description: Unauthorized error
          schema:
            $ref: '#/definitions/Error'
    # }}}
    delete: # {{{
      summary: Delete tag
      security:
        - Bearer: []
      parameters:
        - $ref: "#/parameters/tag_path_param"
        - name: new_leaf_policy
          in: query
          description: |
            Defines what to do with the new leaf taggings: keep or delete.
            TODO: provide a link to the explanation.
          required: true
          type: string
          enum:
            - keep
            - del
      tags:
        - Tags
      responses:
        200:
          schema:
            $ref: '#/definitions/EmptyObjectPayload'
        401:
          description: Unauthorized error
          schema:
            $ref: '#/definitions/Error'
    # }}}

  # }}}

  # Bookmarks {{{
  /my/bookmarks:
    get: # {{{
      summary: Get list of bookmarks (either tagged bookmarks or bookmarks by URL)
      description: |
      security:
        - Bearer: []
      parameters:
        - name: url
          in: query
          description: |
            Bookmark URL.
          required: false
          type: string
        - name: tag_id
          in: query
          description: |
            IDs of tags which the bookmark(s) should be tagged with. This
            parameter is ignored if the "url" parameter was given.
          required: false
          type: array
          items:
            type: number
          collectionFormat: multi
      tags:
        - Bookmarks
      responses:
        200:
          description: Array with bookmarks data
          schema:
            type: array
            items:
              $ref: '#/definitions/Bookmark'
        401:
          description: Unauthorized error
          schema:
            $ref: '#/definitions/Error'
    # }}}
    post: # {{{
      summary: Add a new bookmark
      description: |
      security:
        - Bearer: []
      parameters:
        - name: bookmark_data
          in: body
          description: |
            Bookmark data
          required: true
          schema:
            $ref: '#/definitions/BookmarkPostPayload'

      tags:
        - Bookmarks
      responses:
        200:
          description: New bookmark data
          schema:
            type: array
            items:
              $ref: '#/definitions/Bookmark'
        401:
          description: Unauthorized error
          schema:
            $ref: '#/definitions/Error'
    # }}}

  /my/bookmarks/{bookmark_id}:
    get: # {{{
      summary: Get a bookmark by ID.
      description: |
      security:
        - Bearer: []
      parameters:
        - $ref: "#/parameters/bookmark_id_param"
      tags:
        - Bookmarks
      responses:
        200:
          description: Bookmark data
          schema:
            $ref: '#/definitions/Bookmark'
        401:
          description: Unauthorized error
          schema:
            $ref: '#/definitions/Error'
    # }}}
    put: # {{{
      summary: Edit existing bookmark
      security:
        - Bearer: []
      parameters:
        - $ref: "#/parameters/bookmark_id_param"
        - name: bookmark_data
          in: body
          description: |
            Bookmark data
          required: true
          schema:
            $ref: '#/definitions/BookmarkPostPayload'
      tags:
        - Bookmarks
      responses:
        200:
          schema:
            $ref: '#/definitions/EmptyObjectPayload'
        401:
          description: Unauthorized error
          schema:
            $ref: '#/definitions/Error'
    # }}}
    delete: # {{{
      summary: Delete bookmark
      security:
        - Bearer: []
      parameters:
        - $ref: "#/parameters/bookmark_id_param"
      tags:
        - Bookmarks
      responses:
        200:
          schema:
            $ref: '#/definitions/EmptyObjectPayload'
        401:
          description: Unauthorized error
          schema:
            $ref: '#/definitions/Error'
    # }}}

  # }}}
# }}}

# Definitions {{{
definitions:
  Tag: # {{{
    type: object
    properties:
      id:
        type: number
      description:
        type: string
        description: Description of the tag.
      names:
        type: array
        items:
          type: string
        minItems: 1
        description: Names of the tag. The first one is a primary one; others are aliases.
      subtags:
        type: array
        items:
          $ref: '#/definitions/Tag'
  # }}}
  TagFlat: # {{{
    type: object
    properties:
      id:
        type: number
      description:
        type: string
        description: Description of the tag.
      path:
        type: string
        description: Path of the tag, like "/programming/python"
  # }}}
  Bookmark: # {{{
    type: object
    properties:
      id:
        type: number
      url:
        type: string
        description: Bookmarked URL
      title:
        type: string
        description: Bookmark title
      comment:
        type: string
        description: Comment for the bookmark
      updatedAt:
        type: number
        description: Unix timestamp of the last update time
      tags:
        type: array
        items:
          $ref: '#/definitions/BookmarkTag'
  # }}}
  BookmarkTag: # {{{
    type: object
    properties:
      items:
        type: array
        items:
          type: object
          properties:
            id:
              type: number
              description: Tag ID
            name:
              type: string
              description: Tag name
  # }}}
  BookmarkPostPayload: # {{{
    type: object
    properties:
      url:
        type: string
        description: Bookmarked URL
      title:
        type: string
        description: Bookmark title
      comment:
        type: string
        description: Comment for the bookmark
      tagIDs:
        type: array
        items:
          type: number
  # }}}
  TagPostPayload: # {{{
    type: object
    properties:
      names:
        type: array
        items:
          type: string
        minItems: 1
        description: Names of the tag. The first one is a primary one; others are aliases.
      description:
        type: string
        description: Description of the tag.
      createIntermediary:
        type: boolean
        description: |
          If true, all non-existing tags given in "tag_path_parent", will be
          automatically created with the empty description.
  # }}}
  TagPostResponsePayload: # {{{
    type: object
    properties:
      tagID:
        type: number
        description: ID of the newly created tag
  # }}}
  TagPutPayload: # {{{
    type: object
    properties:
      names:
        type: array
        items:
          type: string
        minItems: 1
        description: Names of the tag. The first one is a primary one; others are aliases.
      description:
        type: string
        description: Description of the tag.
      parentTagId:
        type: number
        description: |
          Should be provided if only the tag needs to be moved to a new parent
      newLeafPolicy:
        type: string
        enum:
          - del
          - keep
        description: |
          This parameter is required if only parentTagId is provided, and it
          defines what to do with the new leaf taggings.
          TODO: provide a link to the explanation.
  # }}}
  EmptyObjectPayload: # {{{
    type: object
    properties:
      status:
        type: string
        enum:
          - ok
  # }}}
  Error: # {{{
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  # }}}

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
# }}}

# Parameters {{{
parameters:
  tag_path_param:
    # TODO: actually, the leading slash is misleading: since the param is used
    # in the path as follows: "/my/tags/{tag_path}", the leading slash in
    # "tag_path" leads to the double slash: "/my/tags//foo/bar". But, given the
    # current swagger limitations, it's the best what I could come up with.
    # Consider:
    #
    # - The path can't look like "/my/tags{tag_path}", swagger complains
    # - Swagger requires that parameters which are located in path should
    #   always have "required: true"
    # - Required parameters can't have the value "" (i.e. empty string)
    #
    # So, there's no way (which I can think of) to make it work normally. Thus,
    # the server just cleans up the leading slash: an ugly hack, but works.
    # Hopefully, swagger will get better and will support wildcard parameters,
    # so that I can sort it out in a better way.
    name: tag_path
    in: path
    description: |
      Tag path or id. So it can be e.g. "/", "/foo/bar", or "123".
    required: true
    type: string
    default: "/"
  parent_tag_path_param:
    # TODO: (read the todo for tag_path_param above)
    name: tag_path_parent
    in: path
    description: |
      Path or id of the parent tag. So it can be e.g. "/", "/foo/bar", or "123".
    required: true
    type: string
    default: "/"
  bookmark_id_param:
    name: bookmark_id
    in: path
    description: |
      Bookmark ID.
    required: true
    type: number
# }}}
